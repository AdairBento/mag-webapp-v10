name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

permissions:
  actions: read
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  COVERAGE_THRESHOLD: 80

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: api/package-lock.json
      - run: npm ci --no-audit --no-fund
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18.x, 20.x]
    name: Test (Node ${{ matrix.node }})
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: api/package-lock.json
      - run: npm ci --no-audit --no-fund
      - run: npm run typecheck
      # força reporters pra gerar coverage-final.json, lcov e html
      - run: npm test --silent -- --coverage.reporter=json --coverage.reporter=html --coverage.reporter=lcov
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-${{ matrix.node }}
          path: api/coverage
          retention-days: 7
          overwrite: true
          if-no-files-found: warn

  sca-sast:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: api/package-lock.json
      - run: npm ci --no-audit --no-fund
      - run: npm audit --audit-level=moderate
      - name: Run ESLint for SAST
        run: npm run lint

  merge-coverage-report:
    if: ${{ always() }}              # roda mesmo se 'test' falhar
    needs: [test]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}  # para usar gh api
    steps:
      - name: Checar se existem artifacts de coverage
        id: chk
        shell: bash
        run: |
          set -euo pipefail
          cnt=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts | map(select(.name|test("^api-coverage"))) | length' || echo 0)
          echo "count=$cnt" >> "$GITHUB_OUTPUT"

      - name: Limpar pasta de downloads (antes)
        shell: bash
        run: rm -rf coverage-ci/downloads || true

      - name: Download coverage artifacts (api-coverage-*)
        if: steps.chk.outputs.count != '0'
        uses: actions/download-artifact@v4
        with:
          pattern: api-coverage-*
          merge-multiple: true
          path: ./coverage-ci/downloads

      - name: Download legacy artifact (api-coverage)
        if: steps.chk.outputs.count != '0'
        uses: actions/download-artifact@v4
        with:
          name: api-coverage
          path: ./coverage-ci/downloads

      - name: List downloaded coverage files (debug)
        if: steps.chk.outputs.count != '0'
        run: ls -R coverage-ci

      - name: Merge coverage JSON + gerar HTML/JSON-SUMMARY/LCOV
        if: steps.chk.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p coverage-ci/merge-input coverage-ci/merged coverage-ci/merged-html
          shopt -s globstar nullglob
          i=0
          for f in coverage-ci/downloads/**/coverage-final.json; do
            cp "$f" "coverage-ci/merge-input/coverage-$((++i)).json"
          done
          if [ $i -eq 0 ]; then
            echo "Nenhum coverage-final.json encontrado"; exit 1
          fi
          npx nyc@15.1.0 merge coverage-ci/merge-input coverage-ci/merged/coverage.json
          npx nyc@15.1.0 report --temp-dir=coverage-ci/merged --reporter=html        --report-dir=coverage-ci/merged-html
          npx nyc@15.1.0 report --temp-dir=coverage-ci/merged --reporter=json-summary --report-dir=coverage-ci/merged-html
          npx nyc@15.1.0 report --temp-dir=coverage-ci/merged --reporter=lcovonly    --report-dir=coverage-ci/merged

      - name: Criar HTML fallback (sem coverage)
        if: steps.chk.outputs.count == '0'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p coverage-ci/merged-html
          cat > coverage-ci/merged-html/index.html <<'HTML'
          <!doctype html><meta charset="utf-8"><title>Coverage report</title>
          <h1>Coverage ainda não disponível</h1>
          <p>Este run não gerou artifacts de coverage (api-coverage-*).</p>
          HTML

      - name: Upload merged report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: coverage-ci/merged-html
          retention-days: 7
          overwrite: true

      - name: Extrair % cobertura (lines)
        id: cov
        if: steps.chk.outputs.count != '0'
        run: |
          node -e "const fs=require('fs');const p='coverage-ci/merged-html/coverage-summary.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));fs.appendFileSync(process.env.GITHUB_OUTPUT,`pct=${j.total.lines.pct}\n`);"

      - name: Enforce threshold (${{ env.COVERAGE_THRESHOLD }}%)
        if: steps.chk.outputs.count != '0'
        run: |
          node -e "const p=Number(process.env.PCT)||0,const_th=Number(process.env.THRESHOLD)||80; if(p<const_th){console.error(`Coverage ${p}% < ${const_th}%`);process.exit(1)} else {console.log(`Coverage ${p}% >= ${const_th}%`)}"
        env:
          PCT: ${{ steps.cov.outputs.pct }}
          THRESHOLD: ${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage to Codecov (token)
        if: steps.chk.outputs.count != '0'
        uses: codecov/codecov-action@v5
        with:
          files: coverage-ci/merged/lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Slack coverage alert
        if: ${{ always() && env.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_CUSTOM_PAYLOAD: |
            {"text":"CI Coverage: ${{ steps.cov.outputs.pct || 'n/a' }}% (threshold ${{ env.COVERAGE_THRESHOLD }}%). Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","unfurl_links":false}

      - name: PR Coverage Comment
        if: github.event_name == 'pull_request' && steps.chk.outputs.count != '0'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ## Coverage Report
            **${{ steps.cov.outputs.pct }}%** (threshold **${{ env.COVERAGE_THRESHOLD }}%**)
            - Artifacts: merged-coverage-report
            - Codecov: uploaded via ${{ github.job }}


